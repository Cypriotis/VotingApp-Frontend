{"ast":null,"code":"// authService.js\nconst API_BASE_URL = 'http://52.47.108.89:3000/api';\nconst authService = {\n  login: async (identifier, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*' // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({\n          identifier,\n          password\n        }),\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // Save the authentication token in local storage\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('ID', data.userID);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  },\n  register: async (username, password, email) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*' // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          email\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n      const data = await response.json();\n      console.log('Registration successful:', data);\n\n      // Save the authentication token in local storage upon successful registration\n      localStorage.setItem('authToken', data.token);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n    } catch (error) {\n      console.error('Registration failed:', error.message);\n      throw error;\n    }\n  },\n  isAuthenticated: () => {\n    // Check if the authentication token is present and not expired\n    const authToken = localStorage.getItem('authToken'); // Adjust this based on your token storage\n\n    if (authToken) {\n      // You may also want to decode the token and check its expiration\n      // Example: const decodedToken = decodeToken(authToken);\n      // Check the decodedToken for expiration\n\n      return true; // User is authenticated\n    } else {\n      return false; // User is not authenticated\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["API_BASE_URL","authService","login","identifier","password","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","console","log","localStorage","setItem","token","userID","error","message","register","username","email","isAuthenticated","authToken","getItem"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/authService.js"],"sourcesContent":["// authService.js\nconst API_BASE_URL = 'http://52.47.108.89:3000/api';\n\nconst authService = {\n  login: async (identifier, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({ identifier, password }),\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // Save the authentication token in local storage\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('ID', data.userID);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  },\n\n  register: async (username, password, email) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({ username, password, email }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n\n      const data = await response.json();\n      console.log('Registration successful:', data);\n\n      // Save the authentication token in local storage upon successful registration\n      localStorage.setItem('authToken', data.token);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n\n    } catch (error) {\n      console.error('Registration failed:', error.message);\n      throw error;\n    }\n  },\n\n  isAuthenticated: () => {\n    // Check if the authentication token is present and not expired\n    const authToken = localStorage.getItem('authToken'); // Adjust this based on your token storage\n\n    if (authToken) {\n      // You may also want to decode the token and check its expiration\n      // Example: const decodedToken = decodeToken(authToken);\n      // Check the decodedToken for expiration\n\n      return true; // User is authenticated\n    } else {\n      return false; // User is not authenticated\n    }\n  },\n};\n\nexport default authService;\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,8BAA8B;AAEnD,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAAA,CAAOC,UAAU,EAAEC,QAAQ,KAAK;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,QAAO,EAAE;QACpDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,6BAA6B,EAAE,GAAG,CAAE;QACtC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,UAAU;UAAEC;QAAS,CAAC,CAAC;QAC9CQ,WAAW,EAAE,SAAS,CAAE;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACjC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;;MAEtC;MACAI,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEL,IAAI,CAACM,KAAK,CAAC;MAC7CF,YAAY,CAACC,OAAO,CAAC,IAAI,EAAEL,IAAI,CAACO,MAAM,CAAC;;MAEvC;MACA;IAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACC,OAAO,CAAC;MAC7C,MAAMD,KAAK;IACb;EACF,CAAC;EAEDE,QAAQ,EAAE,MAAAA,CAAOC,QAAQ,EAAEtB,QAAQ,EAAEuB,KAAK,KAAK;IAC7C,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,WAAU,EAAE;QACvDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,6BAA6B,EAAE,GAAG,CAAE;QACtC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEe,QAAQ;UAAEtB,QAAQ;UAAEuB;QAAM,CAAC;MACpD,CAAC,CAAC;MAEF,IAAI,CAACtB,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,IAAI,CAAC;;MAE7C;MACAI,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEL,IAAI,CAACM,KAAK,CAAC;;MAE7C;MACA;IAEF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACC,OAAO,CAAC;MACpD,MAAMD,KAAK;IACb;EACF,CAAC;EAEDK,eAAe,EAAEA,CAAA,KAAM;IACrB;IACA,MAAMC,SAAS,GAAGV,YAAY,CAACW,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;;IAErD,IAAID,SAAS,EAAE;MACb;MACA;MACA;;MAEA,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,MAAM;MACL,OAAO,KAAK,CAAC,CAAC;IAChB;EACF;AACF,CAAC;AAED,eAAe5B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}