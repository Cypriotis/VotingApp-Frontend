{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// authService.js\nimport { useDispatch } from 'react-redux';\nimport { setAuthToken, clearAuthToken } from './authActions';\nconst API_BASE_URL = 'http://13.39.23.248:3000/api';\n\n// Custom hook for using dispatch\nconst useAuthDispatch = () => {\n  _s();\n  const dispatch = useDispatch();\n  return dispatch;\n};\n_s(useAuthDispatch, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\nconst authService = {\n  login: _s2(async (identifier, password) => {\n    _s2();\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*' // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({\n          identifier,\n          password\n        }),\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // Disable ESLint rule for the next line\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const dispatch = useAuthDispatch();\n      dispatch(setAuthToken(data.token));\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  }, \"KawBQZO6wjhJS87clp5ztGL3HzE=\", false, function () {\n    return [useAuthDispatch];\n  }),\n  logout: _s3(async () => {\n    _s3();\n    try {\n      // Perform any additional logout logic if needed\n\n      // Disable ESLint rule for the next line\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const dispatch = useAuthDispatch();\n      dispatch(clearAuthToken());\n\n      // You can handle the response data as needed\n    } catch (error) {\n      console.error('Logout failed:', error.message);\n      throw error;\n    }\n  }, \"KawBQZO6wjhJS87clp5ztGL3HzE=\", false, function () {\n    return [useAuthDispatch];\n  }),\n  register: async (username, email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*' // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          email\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n      const data = await response.json();\n      console.log('Registration successful:', data);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n    } catch (error) {\n      console.error('Registration failed:', error.message);\n      throw error;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["useDispatch","setAuthToken","clearAuthToken","API_BASE_URL","useAuthDispatch","_s","dispatch","authService","login","_s2","identifier","password","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","console","log","token","error","message","logout","_s3","register","username","email"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/authService.js"],"sourcesContent":["// authService.js\nimport { useDispatch } from 'react-redux';\nimport { setAuthToken, clearAuthToken } from './authActions';\n\nconst API_BASE_URL = 'http://13.39.23.248:3000/api';\n\n// Custom hook for using dispatch\nconst useAuthDispatch = () => {\n  const dispatch = useDispatch();\n  return dispatch;\n};\n\nconst authService = {\n  login: async (identifier, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({ identifier, password }),\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // Disable ESLint rule for the next line\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const dispatch = useAuthDispatch();\n      dispatch(setAuthToken(data.token));\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  },\n\n  logout: async () => {\n    try {\n      // Perform any additional logout logic if needed\n\n      // Disable ESLint rule for the next line\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const dispatch = useAuthDispatch();\n      dispatch(clearAuthToken());\n\n      // You can handle the response data as needed\n\n    } catch (error) {\n      console.error('Logout failed:', error.message);\n      throw error;\n    }\n  },\n\n  register: async (username, email, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({ username, password, email }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n\n      const data = await response.json();\n      console.log('Registration successful:', data);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n\n    } catch (error) {\n      console.error('Registration failed:', error.message);\n      throw error;\n    }\n  }\n};\n\nexport default authService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}