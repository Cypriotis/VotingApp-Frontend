{"ast":null,"code":"const API_BASE_URL = 'http://backend-574994684.eu-west-3.elb.amazonaws.com:3000/api';\nconst apiService = {\n  electionreg: async (UserID, UniqueCode, token) => {\n    const Authorization = token; // Make sure the token is formatted correctly\n    console.log(UserID, UniqueCode, Authorization);\n    try {\n      const response = await fetch(`${API_BASE_URL}/addusertoUsersElections`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          // This is not needed for a POST request\n          'Authorization': Authorization\n        },\n        body: JSON.stringify({\n          UserID,\n          UniqueCode\n        }),\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to register user to election');\n      }\n      const data = await response.json();\n      console.log('Registry to election successful');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to register user to election:', error);\n      throw error;\n    }\n  },\n  electioncreate: async (title, description, startDate, endDate, adminID, token) => {\n    const Authorization = token; // Make sure the token is formatted correctly\n    console.log(title, description, startDate, endDate, adminID);\n    try {\n      const response = await fetch(`${API_BASE_URL}/createelection`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          // This is not needed for a POST request\n          'Authorization': Authorization\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          startDate,\n          endDate,\n          adminID\n        }),\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create election');\n      }\n      const data = await response.json();\n      console.log('Election created successfully');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to create election:', error);\n      throw error;\n    }\n  },\n  electionapply: async electionid => {\n    const token = localStorage.getItem('authToken');\n    const Authorization = token; // Make sure the token is formatted correctly\n    try {\n      const response = await fetch(`${API_BASE_URL}/applyforelection/${electionid}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          // This is not needed for a POST request\n          'Authorization': Authorization\n        },\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to register user to election');\n      }\n      const data = await response.json();\n      console.log('Registry to election successful');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to register user to election:', error);\n      throw error;\n    }\n  },\n  results: async userID => {\n    const userid = userID;\n    try {\n      const response = await fetch(`https://8qme6oh2qe.execute-api.eu-west-3.amazonaws.com/final/{usedID+}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userid\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to register user to election');\n      }\n      const data = await response.json();\n      return data;\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to register user to election:', error);\n      throw error;\n    }\n  },\n  getElectionApplications: async token => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/electionApplications`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get election applications');\n      }\n      const data = await response.json();\n      return data; // Return the election applications array directly\n    } catch (error) {\n      console.error('Failed to get election applications:', error);\n      throw error;\n    }\n  },\n  getelections: async (userid, token) => {\n    const Authorization = token;\n    const id = userid;\n    try {\n      const response = await fetch(`${API_BASE_URL}/userelections/${id}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get elections');\n      }\n      const data = await response.json();\n      return data.elections; // Return the elections array directly\n    } catch (error) {\n      console.error('Failed to get elections:', error);\n      throw error;\n    }\n  },\n  uservoted: async (electionid, token) => {\n    const Authorization = token;\n    const id = electionid;\n    try {\n      const response = await fetch(`${API_BASE_URL}/check-vote/${id}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get elections');\n      }\n      const data = await response.json();\n      return data; // Return the elections array directly\n    } catch (error) {\n      console.error('Failed to get elections:', error);\n      throw error;\n    }\n  },\n  getcandidates: async (electionid, token) => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/candidates/${electionid}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get candidates for election');\n      }\n      const data = await response.json();\n      return data.candidates; // Return the candidates array directly\n    } catch (error) {\n      console.error('Failed to get candidates for election:', error);\n      throw error;\n    }\n  },\n  voteforcandidate: async (candidateid, electionsid, token) => {\n    const Authorization = token;\n    const electionsId = electionsid;\n    const candidateId = candidateid;\n    try {\n      const response = await fetch(`${API_BASE_URL}/vote/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        body: JSON.stringify({\n          electionsId,\n          candidateId\n        }),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to vote for candidate');\n      }\n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to vote for candidate:', error);\n      throw error;\n    }\n  },\n  getelectionsapplied: async token => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/checkapplications`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get elections applied');\n      }\n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to get elections applied:', error);\n      throw error;\n    }\n  },\n  acceptedelections: async token => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/acceptedelections`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get elections applied');\n      }\n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to get elections applied:', error);\n      throw error;\n    }\n  },\n  addcandidate: async (electionid, token, candidateData) => {\n    const Authorization = token;\n    const candidateName = candidateData.candidateName;\n    const candidateDetails = candidateData.candidateDetails;\n    console.log(candidateData);\n    console.log(candidateName, candidateDetails); // Log the candidateName and candidateDetails for debugging purposes)\n    console.log(token);\n    try {\n      const response = await fetch(`${API_BASE_URL}/addcandidate/${electionid}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        body: JSON.stringify(candidateData),\n        // Send the candidateData in the request body\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add candidate');\n      }\n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to add candidate:', error);\n      throw error;\n    }\n  },\n  acceptApplication: async (applicationId, token) => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/acceptapplication/${applicationId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to accept application');\n      }\n      const data = await response.json();\n      console.log('Application accepted successfully');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to accept application:', error);\n      throw error;\n    }\n  },\n  rejectApplication: async (applicationId, token) => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/rejectapplication/${applicationId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to accept application');\n      }\n      const data = await response.json();\n      console.log('Application accepted successfully');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to accept application:', error);\n      throw error;\n    }\n  },\n  getElectionDetails: async (userID, token) => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/electiondetails/${userID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get election details');\n      }\n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to get election details:', error);\n      throw error;\n    }\n  },\n  getElectionsData: async (userID, token) => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/electiondetails/${userID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get elections data');\n      }\n      const data = await response.json();\n      return data; // Return the elections array directly\n    } catch (error) {\n      console.error('Failed to get elections data:', error);\n      throw error;\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","apiService","electionreg","UserID","UniqueCode","token","Authorization","console","log","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","error","electioncreate","title","description","startDate","endDate","adminID","electionapply","electionid","localStorage","getItem","results","userID","userid","getElectionApplications","getelections","id","elections","uservoted","getcandidates","candidates","voteforcandidate","candidateid","electionsid","electionsId","candidateId","getelectionsapplied","acceptedelections","addcandidate","candidateData","candidateName","candidateDetails","acceptApplication","applicationId","rejectApplication","getElectionDetails","getElectionsData"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/authService.js"],"sourcesContent":["const API_BASE_URL = 'http://backend-574994684.eu-west-3.elb.amazonaws.com:3000/api';\n\n\nconst apiService = {\n  electionreg: async (UserID, UniqueCode, token) => {\n    const Authorization = token; // Make sure the token is formatted correctly\n    console.log(UserID, UniqueCode, Authorization);\n    try {\n      const response = await fetch(`${API_BASE_URL}/addusertoUsersElections`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // This is not needed for a POST request\n          'Authorization': Authorization,\n        },\n        body: JSON.stringify({ UserID, UniqueCode }),\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to register user to election');\n      }\n      const data = await response.json();\n      console.log('Registry to election successful');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to register user to election:', error);\n      throw error;\n    }\n  },\n  electioncreate: async (title, description, startDate, endDate, adminID, token) => {\n    const Authorization = token; // Make sure the token is formatted correctly\n    console.log(title, description, startDate, endDate, adminID);\n    try {\n      const response = await fetch(`${API_BASE_URL}/createelection`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // This is not needed for a POST request\n          'Authorization': Authorization,\n        },\n        body: JSON.stringify({ title, description, startDate, endDate, adminID }),\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create election');\n      }\n      const data = await response.json();\n      console.log('Election created successfully');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to create election:', error);\n      throw error;\n    }\n  \n  },\n  electionapply: async (electionid) => {\n    const token = localStorage.getItem('authToken');\n    const Authorization = token; // Make sure the token is formatted correctly\n    try {\n      const response = await fetch(`${API_BASE_URL}/applyforelection/${electionid}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // This is not needed for a POST request\n          'Authorization': Authorization,\n        },\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to register user to election');\n      }\n      const data = await response.json();\n      console.log('Registry to election successful');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to register user to election:', error);\n      throw error;\n    }\n  },\n  results: async (userID) => {\n    const userid = userID;\n    try {\n      const response = await fetch(`https://8qme6oh2qe.execute-api.eu-west-3.amazonaws.com/final/{usedID+}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({userid}),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to register user to election');\n      }\n      const data = await response.json();\n      return data;\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to register user to election:', error);\n      throw error;\n    }\n  },\n  getElectionApplications: async (token) => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/electionApplications`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get election applications');\n      }\n      const data = await response.json();\n      return data; // Return the election applications array directly\n    } catch (error) {\n      console.error('Failed to get election applications:', error);\n      throw error;\n    }\n  },\n  getelections: async (userid, token) => {\n    const Authorization = token;\n    const id = userid;\n    try {\n      const response = await fetch(`${API_BASE_URL}/userelections/${id}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get elections');\n      }\n      const data = await response.json();\n      return data.elections; // Return the elections array directly\n    } catch (error) {\n      console.error('Failed to get elections:', error);\n      throw error;\n    }\n  },\n  uservoted: async (electionid, token) => {\n    const Authorization = token;\n    const id = electionid;\n    try {\n      const response = await fetch(`${API_BASE_URL}/check-vote/${id}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get elections');\n      }\n      const data = await response.json();\n      return data; // Return the elections array directly\n    } catch (error) {\n      console.error('Failed to get elections:', error);\n      throw error;\n    }\n  },\n  getcandidates: async (electionid, token) => {\n    const Authorization = token;\n  try {\n    const response = await fetch(`${API_BASE_URL}/candidates/${electionid}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Authorization': Authorization,\n      },\n      credentials: 'include',\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get candidates for election');\n    }\n    const data = await response.json();\n    return data.candidates; // Return the candidates array directly\n  } catch (error) {\n    console.error('Failed to get candidates for election:', error);\n    throw error;\n  }\n},\nvoteforcandidate: async (candidateid,electionsid, token) => {\n  const Authorization = token;\n  const electionsId = electionsid;\n  const candidateId = candidateid\ntry {\n  const response = await fetch(`${API_BASE_URL}/vote/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Authorization': Authorization,\n    },\n    body: JSON.stringify({ electionsId, candidateId}),\n    credentials: 'include',\n  });\n  if (!response.ok) {\n    throw new Error('Failed to vote for candidate');\n  }\n  const data = await response.json();\n  return data; // Return the entire response data\n} catch (error) {\n  console.error('Failed to vote for candidate:', error);\n  throw error;\n}\n},\n  getelectionsapplied: async (token) => {\n    const Authorization = token;\n  \n    try {\n      const response = await fetch(`${API_BASE_URL}/checkapplications`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to get elections applied');\n      }\n  \n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to get elections applied:', error);\n      throw error;\n    }\n  },\n  acceptedelections: async (token) => {\n    const Authorization = token;\n  \n    try {\n      const response = await fetch(`${API_BASE_URL}/acceptedelections`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to get elections applied');\n      }\n  \n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to get elections applied:', error);\n      throw error;\n    }\n  },\n  addcandidate: async (electionid, token, candidateData) => {\n    const Authorization = token;\n    const candidateName = candidateData.candidateName;\n    const candidateDetails = candidateData.candidateDetails;\n    console.log(candidateData)\n    console.log(candidateName, candidateDetails); // Log the candidateName and candidateDetails for debugging purposes)\n    console.log(token)\n    try {\n      const response = await fetch(`${API_BASE_URL}/addcandidate/${electionid}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        body: JSON.stringify(candidateData), // Send the candidateData in the request body\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add candidate');\n      }\n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to add candidate:', error);\n      throw error;\n    }\n  },\n  acceptApplication: async (applicationId, token) => {\n    const Authorization = token;\n  \n    try {\n      const response = await fetch(`${API_BASE_URL}/acceptapplication/${applicationId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to accept application');\n      }\n  \n      const data = await response.json();\n      console.log('Application accepted successfully');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to accept application:', error);\n      throw error;\n    }\n  },\n  rejectApplication: async (applicationId, token) => {\n    const Authorization = token;\n  \n    try {\n      const response = await fetch(`${API_BASE_URL}/rejectapplication/${applicationId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to accept application');\n      }\n  \n      const data = await response.json();\n      console.log('Application accepted successfully');\n      // Adjust based on your server's requirements\n    } catch (error) {\n      console.error('Failed to accept application:', error);\n      throw error;\n    }\n  },\n  getElectionDetails: async (userID, token) => {\n    const Authorization = token;\n  \n    try {\n      const response = await fetch(`${API_BASE_URL}/electiondetails/${userID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to get election details');\n      }\n  \n      const data = await response.json();\n      return data; // Return the entire response data\n    } catch (error) {\n      console.error('Failed to get election details:', error);\n      throw error;\n    }\n  },\n  getElectionsData: async (userID, token) => {\n    const Authorization = token;\n    try {\n      const response = await fetch(`${API_BASE_URL}/electiondetails/${userID}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Authorization': Authorization,\n        },\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get elections data');\n      }\n      const data = await response.json();\n      return data; // Return the elections array directly\n    } catch (error) {\n      console.error('Failed to get elections data:', error);\n      throw error;\n    }\n  },\n  \n};\nexport default apiService;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}