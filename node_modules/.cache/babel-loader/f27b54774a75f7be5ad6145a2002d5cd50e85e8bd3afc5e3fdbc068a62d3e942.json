{"ast":null,"code":"// authService.js\nconst API_BASE_URL = 'http://13.39.23.248:3000/api';\nconst authService = {\n  login: async (username, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*' // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({\n          identifier,\n          password\n        }),\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["API_BASE_URL","authService","login","username","password","response","fetch","method","headers","body","JSON","stringify","identifier","credentials","ok","Error","data","json","console","log","error","message"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/authService.js"],"sourcesContent":["// authService.js\nconst API_BASE_URL = 'http://13.39.23.248:3000/api';\n\nconst authService = {\n  login: async (username, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({ identifier, password }),\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  },\n};\n\nexport default authService;\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,8BAA8B;AAEnD,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,QAAO,EAAE;QACpDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,6BAA6B,EAAE,GAAG,CAAE;QACtC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,UAAU;UAAER;QAAS,CAAC,CAAC;QAC9CS,WAAW,EAAE,SAAS,CAAE;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACjC;MAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;;MAEtC;MACA;IAEF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACC,OAAO,CAAC;MAC7C,MAAMD,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAenB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}