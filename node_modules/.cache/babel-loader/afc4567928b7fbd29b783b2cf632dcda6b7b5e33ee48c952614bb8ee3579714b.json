{"ast":null,"code":"var _jsxFileName = \"/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/components/resultsShow/ElectionResults.js\",\n  _s = $RefreshSig$();\n// ElectionResults.js\n\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../../apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ElectionResults = ({\n  electionid\n}) => {\n  _s();\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    const fetchResultsData = async () => {\n      try {\n        const userID = localStorage.getItem('ID');\n        const response = await apiService.results(userID);\n        const filteredResults = response.filter(candidate => candidate.ElectionID === electionid);\n        setResults(filteredResults);\n      } catch (error) {\n        console.error('Error fetching results:', error);\n      }\n    };\n    fetchResultsData();\n  }, [electionid]);\n  if (!results || results.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No results available for this election.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-container\",\n    children: results.map((candidate, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"candidate-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"candidate-name\",\n        children: candidate.CandidateName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"votes-count\",\n        children: `Votes: ${candidate.VotesCount || 0}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(ElectionResults, \"0Oir8sO9qj6087fqVYj2OrfQH1E=\");\n_c = ElectionResults;\nexport default ElectionResults;\nvar _c;\n$RefreshReg$(_c, \"ElectionResults\");","map":{"version":3,"names":["React","useState","useEffect","apiService","jsxDEV","_jsxDEV","ElectionResults","electionid","_s","results","setResults","fetchResultsData","userID","localStorage","getItem","response","filteredResults","filter","candidate","ElectionID","error","console","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","CandidateName","VotesCount","_c","$RefreshReg$"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/components/resultsShow/ElectionResults.js"],"sourcesContent":["// ElectionResults.js\n\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../../apiService';\n\nconst ElectionResults = ({ electionid }) => {\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    const fetchResultsData = async () => {\n      try {\n        const userID = localStorage.getItem('ID');\n        const response = await apiService.results(userID);\n        const filteredResults = response.filter(candidate => candidate.ElectionID === electionid);\n        setResults(filteredResults);\n  \n      } catch (error) {\n        console.error('Error fetching results:', error);\n      }\n    };\n\n    fetchResultsData();\n  }, [electionid]);\n\n  if (!results || results.length === 0) {\n    return <div>No results available for this election.</div>;\n  }\n\n  return (\n    <div className=\"results-container\">\n      {results.map((candidate, index) => (\n        <div key={index} className=\"candidate-card\">\n          <div className=\"candidate-name\">{candidate.CandidateName}</div>\n          <div className=\"votes-count\">{`Votes: ${candidate.VotesCount || 0}`}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ElectionResults;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC;QACzC,MAAMC,QAAQ,GAAG,MAAMZ,UAAU,CAACM,OAAO,CAACG,MAAM,CAAC;QACjD,MAAMI,eAAe,GAAGD,QAAQ,CAACE,MAAM,CAACC,SAAS,IAAIA,SAAS,CAACC,UAAU,KAAKZ,UAAU,CAAC;QACzFG,UAAU,CAACM,eAAe,CAAC;MAE7B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDT,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;EAEhB,IAAI,CAACE,OAAO,IAAIA,OAAO,CAACa,MAAM,KAAK,CAAC,EAAE;IACpC,oBAAOjB,OAAA;MAAAkB,QAAA,EAAK;IAAuC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC3D;EAEA,oBACEtB,OAAA;IAAKuB,SAAS,EAAC,mBAAmB;IAAAL,QAAA,EAC/Bd,OAAO,CAACoB,GAAG,CAAC,CAACX,SAAS,EAAEY,KAAK,kBAC5BzB,OAAA;MAAiBuB,SAAS,EAAC,gBAAgB;MAAAL,QAAA,gBACzClB,OAAA;QAAKuB,SAAS,EAAC,gBAAgB;QAAAL,QAAA,EAAEL,SAAS,CAACa;MAAa;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC/DtB,OAAA;QAAKuB,SAAS,EAAC,aAAa;QAAAL,QAAA,EAAG,UAASL,SAAS,CAACc,UAAU,IAAI,CAAE;MAAC;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,GAFlEG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnB,EAAA,CAjCIF,eAAe;AAAA2B,EAAA,GAAf3B,eAAe;AAmCrB,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}