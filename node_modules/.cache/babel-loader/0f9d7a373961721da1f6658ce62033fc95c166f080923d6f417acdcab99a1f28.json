{"ast":null,"code":"var _jsxFileName = \"/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/components/resultsShow/resultsComp.js\",\n  _s = $RefreshSig$();\n// Parentresults.js\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../../apiService';\nimport Electionsshow from './resultsChild';\nimport ElectionResults from './ElectionResults'; // Import the new component\nimport './parent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Parentresults = () => {\n  _s();\n  const [selectedElectionID, setSelectedElectionID] = useState(null);\n  const [electionsData, setElectionsData] = useState([]);\n  const [resultsData, setResultsData] = useState([]);\n  const fetchData = async () => {\n    try {\n      const userId = localStorage.getItem('ID');\n      const token = localStorage.getItem('authToken');\n\n      // Fetch all elections\n      const data = await apiService.getelections(userId, token);\n      setElectionsData(data);\n    } catch (error) {\n      console.error('Error fetching elections:', error);\n    }\n  };\n  const fetchResultsData = async electionID => {\n    try {\n      const userID = localStorage.getItem('ID');\n      const response = await apiService.results(userID);\n      const filteredResults = response.filter(candidate => candidate.ElectionID === electionID);\n      setResultsData(filteredResults);\n    } catch (error) {\n      console.error('Error fetching results:', error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (selectedElectionID) {\n      fetchResultsData(selectedElectionID);\n    }\n  }, [selectedElectionID]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"elections-container\",\n    children: [electionsData.map((election, index) => /*#__PURE__*/_jsxDEV(Electionsshow, {\n      electionid: election.ElectionID,\n      title: election.Title,\n      description: election.Description,\n      startdate: election.StartDate,\n      enddate: election.EndDate,\n      isLastInRow: (index + 1) % 3 === 0,\n      setSelectedElectionID: setSelectedElectionID // Pass the function to update selected election ID\n    }, election.ElectionID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)), selectedElectionID && /*#__PURE__*/_jsxDEV(ElectionResults, {\n      results: resultsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Parentresults, \"kI9U6yCDVmV5Bct79Ut9YWiw7Y0=\");\n_c = Parentresults;\nexport default Parentresults;\nvar _c;\n$RefreshReg$(_c, \"Parentresults\");","map":{"version":3,"names":["React","useState","useEffect","apiService","Electionsshow","ElectionResults","jsxDEV","_jsxDEV","Parentresults","_s","selectedElectionID","setSelectedElectionID","electionsData","setElectionsData","resultsData","setResultsData","fetchData","userId","localStorage","getItem","token","data","getelections","error","console","fetchResultsData","electionID","userID","response","results","filteredResults","filter","candidate","ElectionID","className","children","map","election","index","electionid","title","Title","description","Description","startdate","StartDate","enddate","EndDate","isLastInRow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/components/resultsShow/resultsComp.js"],"sourcesContent":["// Parentresults.js\nimport React, { useState, useEffect } from 'react';\nimport apiService from '../../apiService';\nimport Electionsshow from './resultsChild';\nimport ElectionResults from './ElectionResults'; // Import the new component\nimport './parent.css';\n\nconst Parentresults = () => {\n  const [selectedElectionID, setSelectedElectionID] = useState(null);\n  const [electionsData, setElectionsData] = useState([]);\n  const [resultsData, setResultsData] = useState([]);\n\n  const fetchData = async () => {\n    try {\n      const userId = localStorage.getItem('ID');\n      const token = localStorage.getItem('authToken');\n\n      // Fetch all elections\n      const data = await apiService.getelections(userId, token);\n      setElectionsData(data);\n    } catch (error) {\n      console.error('Error fetching elections:', error);\n    }\n  };\n\n  const fetchResultsData = async (electionID) => {\n    try {\n      const userID = localStorage.getItem('ID');\n      const response = await apiService.results(userID);\n      const filteredResults = response.filter(candidate => candidate.ElectionID === electionID);\n      setResultsData(filteredResults);\n    } catch (error) {\n      console.error('Error fetching results:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (selectedElectionID) {\n      fetchResultsData(selectedElectionID);\n    }\n  }, [selectedElectionID]);\n\n  return (\n    <div className=\"elections-container\">\n      {electionsData.map((election, index) => (\n        <Electionsshow\n          key={election.ElectionID}\n          electionid={election.ElectionID}\n          title={election.Title}\n          description={election.Description}\n          startdate={election.StartDate}\n          enddate={election.EndDate}\n          isLastInRow={(index + 1) % 3 === 0}\n          setSelectedElectionID={setSelectedElectionID} // Pass the function to update selected election ID\n        />\n      ))}\n      {selectedElectionID && <ElectionResults results={resultsData} />}\n    </div>\n  );\n};\n\nexport default Parentresults;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}