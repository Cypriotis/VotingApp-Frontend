{"ast":null,"code":"var _s = $RefreshSig$();\n// authService.js\nconst API_BASE_URL = 'http://13.38.62.46:3000/api';\nimport { useNavigate } from 'react-router-dom';\nconst authService = {\n  login: async (identifier, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*' // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({\n          identifier,\n          password\n        }),\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // Save the authentication token in local storage\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('ID', data.userID);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  },\n  register: async (username, password, email) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*' // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          email\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n      const data = await response.json();\n      console.log('Registration successful:', data);\n\n      // Save the authentication token in local storage upon successful registration\n      localStorage.setItem('authToken', data.token);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n    } catch (error) {\n      console.error('Registration failed:', error.message);\n      throw error;\n    }\n  },\n  isAuthenticated: async () => {\n    try {\n      const authToken = localStorage.getItem('authToken');\n      const response = await fetch(`${API_BASE_URL}/isauthenticated`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*' // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({\n          token: authToken\n        }),\n        // Pass authToken as a POST parameter\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        console.error('Error checking authentication status:', response.statusText);\n        return false; // Return false if the response status is not 200\n      }\n      const result = await response.json();\n      return result; // Return the boolean result from the server\n    } catch (error) {\n      console.error('Error checking authentication status:', error.message);\n      return false; // Return false in case of an error\n    }\n  },\n  logout: _s(async () => {\n    _s();\n    const navigate = useNavigate();\n    try {\n      const authToken = localStorage.getItem('authToken');\n      const userid = localStorage.getItem('ID');\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('ID');\n      const response = await fetch(`${API_BASE_URL}/logout`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          // Adjust based on your server's requirements\n          'Authorization': authToken\n        },\n        body: JSON.stringify({\n          userid\n        }),\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!response.ok) {\n        console.error('Error logging out user', response.statusText);\n        return false; // Return false if the response status is not 200\n      }\n      const result = await response.json();\n\n      // If logout was successful, navigate to /login\n      if (result.success) {\n        navigate('/login');\n      }\n      return result; // Return the boolean result from the server\n    } catch (error) {\n      console.error('Error logging user out:', error.message);\n      return false; // Return false in case of an error\n    }\n  }, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n    return [useNavigate];\n  }),\n  isLoggedIn: () => {\n    // Check if the authentication token is present in local storage\n    const authToken = localStorage.getItem('authToken');\n    return !!authToken;\n  },\n  logout: () => {\n    // Clear the authentication token from local storage\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('ID');\n  }\n};\nexport default authService;","map":{"version":3,"names":["API_BASE_URL","useNavigate","authService","login","identifier","password","response","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","console","log","localStorage","setItem","token","userID","error","message","register","username","email","isAuthenticated","authToken","getItem","statusText","result","logout","_s","navigate","userid","removeItem","success","isLoggedIn"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/authService.js"],"sourcesContent":["// authService.js\nconst API_BASE_URL = 'http://13.38.62.46:3000/api';\nimport { useNavigate } from 'react-router-dom';\n\n\nconst authService = {\n  login: async (identifier, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({ identifier, password }),\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n\n      const data = await response.json();\n      console.log('Login successful:', data);\n\n      // Save the authentication token in local storage\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('ID', data.userID);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  },\n\n  register: async (username, password, email) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({ username, password, email }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Registration failed');\n      }\n\n      const data = await response.json();\n      console.log('Registration successful:', data);\n\n      // Save the authentication token in local storage upon successful registration\n      localStorage.setItem('authToken', data.token);\n\n      // You can handle the response data as needed\n      // For example, you might store user information in state or context\n\n    } catch (error) {\n      console.error('Registration failed:', error.message);\n      throw error;\n    }\n  },\n\n  isAuthenticated: async () => {\n    try {\n      const authToken = localStorage.getItem('authToken');\n      const response = await fetch(`${API_BASE_URL}/isauthenticated`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n        },\n        body: JSON.stringify({ token: authToken }), // Pass authToken as a POST parameter\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n\n      if (!response.ok) {\n        console.error('Error checking authentication status:', response.statusText);\n        return false; // Return false if the response status is not 200\n      }\n\n      const result = await response.json();\n      return result; // Return the boolean result from the server\n\n    } catch (error) {\n      console.error('Error checking authentication status:', error.message);\n      return false; // Return false in case of an error\n    }\n  },\n  logout: async () => {\n    const navigate = useNavigate();\n\n    try {\n      const authToken = localStorage.getItem('authToken');\n      const userid = localStorage.getItem('ID');\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('ID');\n\n      const response = await fetch(`${API_BASE_URL}/logout`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*', // Adjust based on your server's requirements\n          'Authorization': authToken,\n        },\n        body: JSON.stringify({ userid }),\n        credentials: 'include', // Include credentials (cookies, etc.)\n      });\n\n      if (!response.ok) {\n        console.error('Error logging out user', response.statusText);\n        return false; // Return false if the response status is not 200\n      }\n\n      const result = await response.json();\n\n      // If logout was successful, navigate to /login\n      if (result.success) {\n        navigate('/login');\n      }\n\n      return result; // Return the boolean result from the server\n\n    } catch (error) {\n      console.error('Error logging user out:', error.message);\n      return false; // Return false in case of an error\n    }\n  },\n  isLoggedIn: () => {\n    // Check if the authentication token is present in local storage\n    const authToken = localStorage.getItem('authToken');\n    return !!authToken;\n  },\n  logout: () => {\n    // Clear the authentication token from local storage\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('ID');\n  },\n  \n};\n\n\n\nexport default authService;\n"],"mappings":";AAAA;AACA,MAAMA,YAAY,GAAG,6BAA6B;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAG9C,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAAA,CAAOC,UAAU,EAAEC,QAAQ,KAAK;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,QAAO,EAAE;QACpDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,6BAA6B,EAAE,GAAG,CAAE;QACtC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,UAAU;UAAEC;QAAS,CAAC,CAAC;QAC9CQ,WAAW,EAAE,SAAS,CAAE;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACjC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;;MAEtC;MACAI,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEL,IAAI,CAACM,KAAK,CAAC;MAC7CF,YAAY,CAACC,OAAO,CAAC,IAAI,EAAEL,IAAI,CAACO,MAAM,CAAC;;MAEvC;MACA;IAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACC,OAAO,CAAC;MAC7C,MAAMD,KAAK;IACb;EACF,CAAC;EAEDE,QAAQ,EAAE,MAAAA,CAAOC,QAAQ,EAAEtB,QAAQ,EAAEuB,KAAK,KAAK;IAC7C,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,WAAU,EAAE;QACvDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,6BAA6B,EAAE,GAAG,CAAE;QACtC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEe,QAAQ;UAAEtB,QAAQ;UAAEuB;QAAM,CAAC;MACpD,CAAC,CAAC;MAEF,IAAI,CAACtB,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,IAAI,CAAC;;MAE7C;MACAI,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEL,IAAI,CAACM,KAAK,CAAC;;MAE7C;MACA;IAEF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACC,OAAO,CAAC;MACpD,MAAMD,KAAK;IACb;EACF,CAAC;EAEDK,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMC,SAAS,GAAGV,YAAY,CAACW,OAAO,CAAC,WAAW,CAAC;MACnD,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,kBAAiB,EAAE;QAC9DQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,6BAA6B,EAAE,GAAG,CAAE;QACtC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEU,KAAK,EAAEQ;QAAU,CAAC,CAAC;QAAE;QAC5CjB,WAAW,EAAE,SAAS,CAAE;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChBI,OAAO,CAACM,KAAK,CAAC,uCAAuC,EAAElB,QAAQ,CAAC0B,UAAU,CAAC;QAC3E,OAAO,KAAK,CAAC,CAAC;MAChB;MAEA,MAAMC,MAAM,GAAG,MAAM3B,QAAQ,CAACW,IAAI,CAAC,CAAC;MACpC,OAAOgB,MAAM,CAAC,CAAC;IAEjB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAACC,OAAO,CAAC;MACrE,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;EACDS,MAAM,EAAAC,EAAA,CAAE,YAAY;IAAAA,EAAA;IAClB,MAAMC,QAAQ,GAAGnC,WAAW,CAAC,CAAC;IAE9B,IAAI;MACF,MAAM6B,SAAS,GAAGV,YAAY,CAACW,OAAO,CAAC,WAAW,CAAC;MACnD,MAAMM,MAAM,GAAGjB,YAAY,CAACW,OAAO,CAAC,IAAI,CAAC;MACzCX,YAAY,CAACkB,UAAU,CAAC,WAAW,CAAC;MACpClB,YAAY,CAACkB,UAAU,CAAC,IAAI,CAAC;MAE7B,MAAMhC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,SAAQ,EAAE;QACrDQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,6BAA6B,EAAE,GAAG;UAAE;UACpC,eAAe,EAAEqB;QACnB,CAAC;QACDpB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEyB;QAAO,CAAC,CAAC;QAChCxB,WAAW,EAAE,SAAS,CAAE;MAC1B,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChBI,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAElB,QAAQ,CAAC0B,UAAU,CAAC;QAC5D,OAAO,KAAK,CAAC,CAAC;MAChB;MAEA,MAAMC,MAAM,GAAG,MAAM3B,QAAQ,CAACW,IAAI,CAAC,CAAC;;MAEpC;MACA,IAAIgB,MAAM,CAACM,OAAO,EAAE;QAClBH,QAAQ,CAAC,QAAQ,CAAC;MACpB;MAEA,OAAOH,MAAM,CAAC,CAAC;IAEjB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACC,OAAO,CAAC;MACvD,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;IAAA,QArCkBxB,WAAW;EAAA,EAqC7B;EACDuC,UAAU,EAAEA,CAAA,KAAM;IAChB;IACA,MAAMV,SAAS,GAAGV,YAAY,CAACW,OAAO,CAAC,WAAW,CAAC;IACnD,OAAO,CAAC,CAACD,SAAS;EACpB,CAAC;EACDI,MAAM,EAAEA,CAAA,KAAM;IACZ;IACAd,YAAY,CAACkB,UAAU,CAAC,WAAW,CAAC;IACpClB,YAAY,CAACkB,UAAU,CAAC,IAAI,CAAC;EAC/B;AAEF,CAAC;AAID,eAAepC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}