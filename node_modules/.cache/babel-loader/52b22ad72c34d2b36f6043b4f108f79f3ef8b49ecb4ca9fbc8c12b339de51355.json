{"ast":null,"code":"const API_BASE_URL = 'http://13.39.23.248:3000/api';\nconst apiService = {\n  electionreg: async (UsedID, UniqueCode) => {\n    const authToken = localStorage.getItem('authToken');\n    try {\n      const repsone = await fetch(`${API_BASE_URL}/addusertoUsersElections`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({\n          UsedID,\n          UniqueCode,\n          authToken\n        }),\n        credentials: 'include' // Include credentials (cookies, etc.)\n      });\n      if (!repsone.ok) {\n        throw new Error('Failed to register user to election');\n      }\n      const data = await repsone.json();\n      console.log('Registry to election successful');\n\n      // Adjust based on your server's requirements)\n    } catch (error) {\n      console.error('Failed to register user to election:', error);\n      throw error;\n    }\n  }\n};\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","apiService","electionreg","UsedID","UniqueCode","authToken","localStorage","getItem","repsone","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","console","log","error"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/apiService.js"],"sourcesContent":["const API_BASE_URL = 'http://13.39.23.248:3000/api';\n\nconst apiService = {\n    electionreg: async (UsedID, UniqueCode) => {\n        const authToken = localStorage.getItem('authToken');\n        try {\n            const repsone = await fetch(`${API_BASE_URL}/addusertoUsersElections`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': '*',\n                 },\n                 body: JSON.stringify({ UsedID, UniqueCode, authToken}),\n                 credentials: 'include', // Include credentials (cookies, etc.)\n            });\n\n            if (!repsone.ok) {\n                throw new Error('Failed to register user to election');\n            }\n            const data = await repsone.json();\n            console.log('Registry to election successful');\n            \n                  // Adjust based on your server's requirements)\n        }catch (error) {\n            console.error('Failed to register user to election:', error);\n        throw error ;\n        }\n    }\n  };\n  \n  export default apiService;"],"mappings":"AAAA,MAAMA,YAAY,GAAG,8BAA8B;AAEnD,MAAMC,UAAU,GAAG;EACfC,WAAW,EAAE,MAAAA,CAAOC,MAAM,EAAEC,UAAU,KAAK;IACvC,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,IAAI;MACA,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,GAAET,YAAa,0BAAyB,EAAE;QACnEU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,6BAA6B,EAAE;QAClC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEX,MAAM;UAAEC,UAAU;UAAEC;QAAS,CAAC,CAAC;QACtDU,WAAW,EAAE,SAAS,CAAE;MAC7B,CAAC,CAAC;MAEF,IAAI,CAACP,OAAO,CAACQ,EAAE,EAAE;QACb,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;MAC1D;MACA,MAAMC,IAAI,GAAG,MAAMV,OAAO,CAACW,IAAI,CAAC,CAAC;MACjCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;MAExC;IACV,CAAC,QAAOC,KAAK,EAAE;MACXF,OAAO,CAACE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACX;EACJ;AACF,CAAC;AAED,eAAerB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}