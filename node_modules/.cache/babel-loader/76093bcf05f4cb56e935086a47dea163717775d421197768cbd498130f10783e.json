{"ast":null,"code":"// authService.js\n\nconst API_BASE_URL = 'http://13.39.86.137:3000/api';\nconst authService = {\n  login: async (username, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Invalid credentials'); // Adjust the error handling based on your API response\n      }\n      const data = await response.json();\n\n      // Store the authentication token or user data in local storage or a global state management solution\n      // For example, you can use localStorage.setItem('token', data.token);\n\n      console.log('Login successful:', data);\n      return data; // You might want to return some user data or token\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["API_BASE_URL","authService","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","console","log","error","message"],"sources":["/home/tofi-machine/Documents/VotingApp/Frontend/VotingApp-Frontend/src/authService.js"],"sourcesContent":["// authService.js\n\nconst API_BASE_URL = 'http://13.39.86.137:3000/api';\n\nconst authService = {\n  login: async (username, password) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Invalid credentials'); // Adjust the error handling based on your API response\n      }\n\n      const data = await response.json();\n\n      // Store the authentication token or user data in local storage or a global state management solution\n      // For example, you can use localStorage.setItem('token', data.token);\n\n      console.log('Login successful:', data);\n\n      return data; // You might want to return some user data or token\n    } catch (error) {\n      console.error('Login failed:', error.message);\n      throw error;\n    }\n  },\n};\n\nexport default authService;\n"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAG,8BAA8B;AAEnD,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,YAAa,QAAO,EAAE;QACpDO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,QAAQ;UAAEC;QAAS,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;MAC1C;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;;MAElC;MACA;;MAEAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;MAEtC,OAAOA,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACC,OAAO,CAAC;MAC7C,MAAMD,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAejB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}